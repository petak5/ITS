# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestUsecaseadd():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_usecaseadd(self):
    self.driver.get("http://localhost:8080/repo/use-cases#c4=all&b_start=0")
    self.driver.find_element(By.CSS_SELECTOR, "#plone-contentmenu-factories .plone-toolbar-title").click()
    self.driver.find_element(By.ID, "use_case").click()
    self.driver.find_element(By.ID, "form-widgets-IBasic-title").click()
    self.driver.find_element(By.ID, "form-widgets-IBasic-title").send_keys("Example use case")
    self.driver.switch_to.frame(0)
    self.driver.find_element(By.CSS_SELECTOR, "html").click()
    element = self.driver.find_element(By.ID, "tinymce")
    self.driver.execute_script("if(arguments[0].contentEditable === 'true') {arguments[0].innerText = 'An example use case'}", element)
    self.driver.switch_to.default_content()
    self.driver.find_element(By.ID, "form-buttons-save").click()
    assert self.driver.find_element(By.CSS_SELECTOR, ".portalMessage").text == "Info Item created"
  
